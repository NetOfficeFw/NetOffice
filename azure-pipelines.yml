# NetOffice project build pipeline

pool:
  vmImage: 'windows-2022'

variables:
  solution: Source/NetOffice.sln

strategy:
  maxParallel: 2
  matrix:
    Debug:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Debug'
      VersionSuffix: preview$(Build.BuildId)
    Release:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      VersionSuffix: preview$(Build.BuildId)

steps:
- task: NuGetToolInstaller@1

- task: UseDotNet@2
  displayName: 'Use .NET 6'
  inputs:
    version: 6.x

- task: DotNetCoreCLI@2
  displayName: Install AzureSignTool
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global azuresigntool --version 3.0.0'

# Run build tasks
- task: PowerShell@2
  displayName: Report NetOffice version
  inputs:
    pwsh: true
    targetType: inline
    script: |
      [xml]$project = Get-Content (Join-Path -Path $(Build.SourcesDirectory) -ChildPath 'Source\NetOffice.props')
      $version = $project.Project.PropertyGroup[0].NetOfficeRelease

      Write-Host "##vso[task.setvariable variable=NetOfficeRelease]$version"
      Write-Host "##vso[task.setvariable variable=NetOfficePackageName]NetOffice_v$version-$(VersionSuffix)_$(buildConfiguration)_build$(Build.BuildId).zip"

- task: CopyFiles@2
  displayName: Copy source code to artifact
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
      Source/**
      Examples/**
      Tutorials/**
      CHANGELOG.md
      LICENSE.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build NetOffice
  inputs:
    solution: '$(solution)'
    vsVersion: '17.0'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/t:Build;Pack /p:VersionSuffix="$(VersionSuffix)" /p:RepositoryBranch="$(Build.SourceBranchName)" /p:RepositoryCommit="$(Build.SourceVersion)" /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)\nuget" /p:ContinuousIntegrationBuild=true'
    createLogFile: true
    logFileVerbosity: 'detailed'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    configuration: '$(buildConfiguration)'
    testFiltercriteria: 'TestCategory!=IntegrationTests'
    testAssemblyVer2: |
      Source\NetOffice.Tests\bin\$(buildConfiguration)\NetOffice.Tests.dll

- task: DeleteFiles@1
  displayName: Cleanup assemblies output
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\Source\ClientApplication\bin\$(buildConfiguration)'
    contents: |
      ClientApplication.**
      stdole.dll

- task: CmdLine@2
  displayName: Sign NetOffice libraries
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['buildConfiguration'], 'Release'), or (startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
  inputs:
    workingDirectory: '$(Build.SourcesDirectory)\Source\ClientApplication\bin\$(buildConfiguration)'
    script: |
      dir /s /b *Api.dll > signlist.txt
      dir /s /b NetOffice.dll >> signlist.txt
      AzureSignTool.exe sign ^
      --file-digest sha256 ^
      --description-url "https://github.com/NetOfficeFw/NetOffice" ^
      --no-page-hashing ^
      --timestamp-rfc3161 http://timestamp.digicert.com ^
      --timestamp-digest sha256 ^
      --azure-key-vault-url https://opensourcesigning.vault.azure.net ^
      --azure-key-vault-tenant-id "$(KeyVaultTenantId)" ^
      --azure-key-vault-client-id "$(KeyVaultClientId)" ^
      --azure-key-vault-client-secret "$(KeyVaultClientSecret)" ^
      --azure-key-vault-certificate "goITSolutions-until-2024-01" ^
      --input-file-list signlist.txt ^
      --verbose

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)\Source\ClientApplication\bin\$(buildConfiguration)'
    contents: |
      **
      !ClientApplication.**
      !stdole.dll
      !signlist.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)\Assemblies'

- task: ArchiveFiles@2
  displayName: Create NetOffice Package
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(NetOfficePackageName)'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(NetOfficePackageName)'
    artifactName: NetOffice $(buildConfiguration) Package

- task: PublishBuildArtifacts@1
  condition: eq(variables['buildConfiguration'], 'Release')
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)\nuget'
    artifactName: NetOffice NuGet Packages
